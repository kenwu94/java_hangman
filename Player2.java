
import java.io.IOException;
import javax.swing.ImageIcon;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Giulia Chindea and Ken Wu
 * ICS4UE-11
 * July 25, 2022
 * This program allows the second player to try to guess the word inputted by the first player with a limited number of guesses.
 */
public class Player2 extends javax.swing.JFrame {
    // boolean to indicate who wins the game
    static boolean player1win;
    // gets the array of letters from player1 class
    private String[] letters = Player1.getLetters();
    // gets the number of guesses from player1 class
    private int guesses = Player1.getGuesses();
    // variable to indicate how many letters are left unguessed 
    private int lettersRemaining = letters.length;
    // array to store the letters guessed correctly
    private String[] correctLetters = new String[letters.length];
    // arraylist to store all the guessed letters
    private ArrayList<String> guessedLetters = new ArrayList<>();
    // counter to know which image to display
    private static int imageIndex = 0;
    
    // imports all the needed images
    ImageIcon a = new ImageIcon("body.png");
    ImageIcon b = new ImageIcon("head.png");
    ImageIcon c = new ImageIcon("LArm.png");
    ImageIcon d = new ImageIcon("RArm.png");
    ImageIcon e = new ImageIcon("RLeg.png");
    ImageIcon f = new ImageIcon("LLeg.png");
    ImageIcon g = new ImageIcon("BowTie.png");
    ImageIcon h = new ImageIcon("hat.png");
    ImageIcon i = new ImageIcon("eyes.png");
    ImageIcon j = new ImageIcon("mouth.png");
    
    // creates an arraylist to store all the image icons
    static ArrayList<ImageIcon> images = new ArrayList<>();
    
    /**
     * Creates new form Player2
     */
    public Player2(){
        initComponents();
        // resets the image index to 0
        imageIndex = 0;
        // adds a number of lines corresponding to the letters of the word to an array
        for(int i = 0; i < correctLetters.length; i++){
            correctLetters[i] = "__  ";
        }
        // displays all the lines
        setLetters();
        
        // displays the number of guesses player 2 has left
        remaining.setText("Guesses Remaining: " + guesses);
        
        // adds all the image icons to the arraylist
        images.add(a);
        images.add(b);
        images.add(c);
        images.add(d);
        images.add(e);
        images.add(f);
        images.add(g);
        images.add(h);
        images.add(i);
        images.add(j);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backToMenu_btn = new javax.swing.JButton();
        guessPrompt_lbl = new javax.swing.JLabel();
        guess_txt = new javax.swing.JTextField();
        guess_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        guessedLetters_txt = new javax.swing.JTextArea();
        feedback_lbl = new javax.swing.JLabel();
        feedback = new javax.swing.JLabel();
        remaining = new javax.swing.JLabel();
        imageArea = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hangman");

        backToMenu_btn.setText("Back to Menu");
        backToMenu_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenu_btnActionPerformed(evt);
            }
        });

        guessPrompt_lbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        guessPrompt_lbl.setText("Enter Your Guess:");

        guess_txt.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        guess_btn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        guess_btn.setText("Guess");
        guess_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guess_btnActionPerformed(evt);
            }
        });

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        guessedLetters_txt.setEditable(false);
        guessedLetters_txt.setColumns(20);
        guessedLetters_txt.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        guessedLetters_txt.setRows(1);
        guessedLetters_txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        jScrollPane2.setViewportView(guessedLetters_txt);

        feedback_lbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        feedback.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        feedback.setText("Guess is: ");

        remaining.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        remaining.setText("Guesses Remaining: ");

        imageArea.setText("     ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(guessPrompt_lbl)
                                .addGap(18, 18, 18)
                                .addComponent(guess_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(feedback, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                        .addGap(101, 101, 101))
                                    .addComponent(guess_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backToMenu_btn)
                                .addGap(47, 47, 47)
                                .addComponent(imageArea))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(remaining, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(feedback_lbl)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backToMenu_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(imageArea)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(feedback, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(guess_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(guessPrompt_lbl)
                            .addComponent(guess_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(feedback_lbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(remaining, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backToMenu_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenu_btnActionPerformed
        // TODO add your handling code here:
        // returns to Menu jFrame form
        this.setVisible(false);
        new Menu().setVisible(true);
    }//GEN-LAST:event_backToMenu_btnActionPerformed

    private void guess_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guess_btnActionPerformed
        // TODO add your handling code here:
        boolean correct = false;
        
        // gets the letter guessed from player 2 input
        String letter = guess_txt.getText();
        // checks if the guess is a single letter
        if(letter.length() != 1){
            // displays an error message prompting player 2 for 1 character input
            JOptionPane.showMessageDialog(rootPane, "Enter 1 character. ", "Error", HEIGHT);
        }
        
        else{
            // checks if the letter has already been guessed
            if (guessedLetters.contains(letter)) {
                // displays an error message telling player 2 that the letter has already been guessed
                JOptionPane.showMessageDialog(rootPane, "Letter has already been guessed. ", "Error", HEIGHT);
            }
            else{
                // adds the letter to the arraylist of letters already guessed
                guessedLetters.add(letter);
                // loops through the list of letters in the word and checks if the guessed letter corresponds to one or more
                for(int i = 0; i < letters.length; i++){
                    if(letters[i].equals(letter.toLowerCase())){
                        correctLetters[i] = letter + "  ";
                        // displays the guessed letter(s) in addition to the lines showing how many letters there are left
                        setLetters();
                        lettersRemaining--;
                        correct = true;
                        // tells player 2 that they guessed correctly
                        feedback.setText("Guess is: CORRECT!");
                    }
                }
                // if player 2 did not guess correctly, outputs to the user that it is incorrect
                if(!correct){
                    guesses--; 
                    feedback.setText("Guess is: INCORRECT");
                    // subtracts a guess from the given number of guesses
                    remaining.setText("Guesses Remaining: " + guesses);
                    // sets the image for the hangman
                    imageArea.setIcon(images.get(imageIndex));
                    imageIndex++;
                }
                
                // checks whether player 2 has guessed all the letters
                if(lettersRemaining == 0){
                    player1win = false;
                    // opens the win jframe form
                    this.setVisible(false);
                    try {
                        new Win().setVisible(true);
                    } catch (IOException ex) {
                        Logger.getLogger(Player2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(guesses == 0){
                    player1win = true;
                    // opens the win jframe form
                    this.setVisible(false);
                    try {
                        new Win().setVisible(true);
                    } catch (IOException ex) {
                        Logger.getLogger(Player2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        guess_txt.setText(null);
    }//GEN-LAST:event_guess_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player2().setVisible(true);
            }
        });
    }
    
    // method to display the letters
    public void setLetters(){
        // indents the front
        guessedLetters_txt.setText("    ");
        // loops through the correctLetters array and displays the letters
        for(int i = 0; i < letters.length; i++){
            guessedLetters_txt.append(correctLetters[i]);
        }
    }
    
    // returns whether player 1 won
    public static boolean getPlayer1win(){
        return player1win;
    }
    
    // returns the arraylist of images
    public static ArrayList getImages(){
        return images;
    }
    
    // returns the index of images for the arraylist of images
    public static int getImageIndex(){
        return imageIndex;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMenu_btn;
    private javax.swing.JLabel feedback;
    private javax.swing.JLabel feedback_lbl;
    private javax.swing.JLabel guessPrompt_lbl;
    private javax.swing.JButton guess_btn;
    private javax.swing.JTextField guess_txt;
    private javax.swing.JTextArea guessedLetters_txt;
    private javax.swing.JLabel imageArea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel remaining;
    // End of variables declaration//GEN-END:variables
}
